SAMPLE CODE AND EXPLANATIONS

// Select the item with the id "c"
var c = document.querySelector("#c");

// Specify the context. In this case, we're building in 2D.
var ctx = c.getContext("2d");

// Anytime something is drawn and "fill" is specified, fill it with the color blue.
ctx.fillStyle = "blue";

// start at (100,100) and draw a 100px x 100px blue rectangle
ctx.fillRect(100,100,100,100);
// start at (100,100) and clear a 50x50 rectangle
ctx.clearRect(100,100,50,50);

// erase an entire canvas
// ctx.clearRect(100,100,c.width,c.height);

// Make sure that every time you create an image, it's a new image
var image = new Image();

//
image.onload = function() {
	console.log("Loaded image");
	ctx.drawImage(image,0,0,c.width,c.height);
	var savedImage = c.toDataURL();
	window.open(savedImage);
};

// Specify a source image.	
image.src = "fry_fixed.jpg";

Quiz to move something on the canvas: Create a triangle within a square.
	// First, create the rectangle.
	ctx.strokeRect(50,50,100,100);
	// Move the cursor to draw within the canvas. First, use beginPath.
	ctx.beginPath();
	// Use moveTo() to move the pen to a point on the canvas.
	ctx.moveTo(75,75);
	// Create a line, starting at (75,75) and ending at (125,75) the line to (50,50)
	ctx.lineTo(125,75);
	// Create another line, starting at (125,75) and drawing to (125,125)
	ctx.lineTo(125,125);
	// Not necessary - with these two lines, we can fill, but.. Create a third line to complete the triangle shape, drawing from (125,125) to (75,75)
	ctx.lineTo(75,75);
	// Fill the new triangle
	ctx.fill();
	// Create an empty triangle with stroke only
	//ctx.stroke();

GENERAL NOTES
Canvas2D allows you to translate (move), rotate, or scale objects.

SCALING
	- scale(x,y): Multiplies x and y values by a given factor. Example:
		- ctx.scale(2,3); makes all x values twice as large and y values 3 times as large.

TRANSLATION (MOVING)
	- translate(x,y): Moves all subsequent draw commands by x number of pixels horizontally and y pixels vertically. Example:
		- ctx.translate(20,40); moves all elements drawn after it 20 pixels to the right and 40 pixels down.

ROTATION
	- ctx.rotate(angleRadians): Rotates an object a certain number of radians about its center. I'm not good with radians, so:
		radians = degrees * (Math.PI/180)

ORDER OF OPERATIONS
	- Scale, then rotate, then translate, in that order.

STACKS
	- Every canvas contains a stack of drawing states.
	- Stacks are data structures that only let you push new items at one end. When you retrieve and item, it's the last item that is pushed, AKA Last-In-First-Out (LIFO).
	- Coding example: Draw a couple of rectangles in different colors. Reassign the fillStyle every time instead of using save and restore methods.
	var c = document.querySelector("#c");
	var ctx = c.getContext("2d");
	
	ctx.fillStyle = "blue";
	ctx.fillRect = (0,0,50,50);
	
	ctx.fillStyle = "green";
	ctx.fillRect(100,100,10,10);
	
	ctx.fillStyle = "blue";
	ctx.fillRect(200,10,20,20);
	
	// But we can improve it!
	var c = document.querySelector("#c");
	var ctx = c.getContext("2d");
	
	ctx.fillStyle = "blue";
	ctx.fillRect(0,0,50,50);
	
	// Save state with blue fill.
	ctx.save();
	// Create a new rectangle
	ctx.fillStyle = "green";
	ctx.fillRect(100,100,10,10);
	// Restore the blue fill
	ctx.restore();
	
	ctx.fillRect(200,10,20,20);
	
	- Canvas states can store the following properties:
		- Current transformation matrix (rotation, scaling, translation)
		- strokeStyle
		- fillStyle
		- font
		- globalAlpha
		- lineWidth
		- lineCap
		- lineJoin
		- miterLimit
		- shadowOffsetX
		- shadowOffsetY
		- shadowBlur
		- shadowColor
		- globalCompositeOperation
		- textAlign
		- The current clipping region

COLORING
	- You can change the color of fills and strokes easily:
	ctx.fillStyle = "blue";
	ctx.strokeStyle = "#33cc33";
	ctx.fill();

// Add text to a screen. DO NOT PLACE AT 0,0: The text is placed according to the bottom left corner of the text.
ctx.strokeText("HELLO UDACITY!", 50, 10); // defines the stroke text
// Add text to a screen without the outline:
ctx.fillText("HELLO UDACITY!", 50, 10);




The image that backs a canvas is represented by an ImageData object, which contains values for width and height (in pixels) and a data array that contains RGB and alpha values for the pixels.
	- A data array is represented by a Unint8ClampedArray:
		- "U": The rate is unsigned/contains only positive values
		- "int8": Stores 8-bit numbers (0-255)
	- If JS made it wasy, the data for one pixel would be sort of like this:
		[[r0,g0,b0,a0],[r1,g1,b1,a1],[r2,g2,b2,a2]...[rn,gn,bn,an]]
	But JS makes it a giant list that you have to parse when you apply effects

Retrieve or modify image data using:
	- createImageData: Creates a blank ImageData object that you can modify.
	- getImageData: Retrieves image data from the backing canvas.
	- putImageData: Stores image data to the backing canvas.

So if we want to change every 10th pixel to a solid green color, how would we do that?
	1. Create a Canvas2DRenderingContext.
	2. Call getImageData to retrieve pixels in the canvas.
	3. Change every 10th pixel to a solid green color.

